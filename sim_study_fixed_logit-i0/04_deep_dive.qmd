---------
title: Simulation study results
jupyter: python3
---------

```{python}
from config import *
import json
import pandas as pd
import plotnine as pn
```

```{python}
list_posteriors = []
posteriors_sims = []
failed_sims = []
for i in range(NUM_SIMS):
    try:
        f = os.path.join(RESULTS_DIR, f"posterior_{i}.npy")
        list_posteriors.append(np.load(f, allow_pickle=True))
    except Exception as e:
        print(f"Failed loading {i}: {e}")
        failed_sims.append(i)
    else:
        posteriors_sims.append(i)
posteriors = np.stack(list_posteriors)
del list_posteriors

with open(os.path.join(RESULTS_DIR, "sim_params.json"), "r") as fp:
    true_params = json.load(fp)
log_posterior = PROBABILISTIC_MODEL_CLASS(model, None, None, PRIORS)
```

```{python}
thinned_params = range(300_000, posteriors.shape[1], 100)
num_sims = posteriors.shape[0]
num_iters = posteriors.shape[1]
# df = pd.DataFrame(
#     posteriors[:,thinned_params,:].flatten(),
#     index=pd.MultiIndex.from_product([range(num_sims), thinned_params, log_posterior.get_param_names()],
#                                      names=["sim", "iteration", "param"]),
#     columns=["value"]
# ).reset_index()
df = pd.DataFrame(
    posteriors[:,thinned_params,:].flatten(),
    index=pd.MultiIndex.from_product([posteriors_sims, thinned_params, log_posterior.get_param_names()],
                                     names=["sim", "iteration", "param"]),
    columns=["value"]
).reset_index()
#del posteriors

true_vals = []
for s in posteriors_sims:
    true_vals.extend(log_posterior.param_value_dict_to_array(true_params[s]))
df_params = pd.DataFrame(
    true_vals,
    index=pd.MultiIndex.from_product([posteriors_sims, log_posterior.get_param_names()], names=["sim", "param"]),
    columns=["true"]
).reset_index()
```

Look at traceplots

```{python}
(
    pn.ggplot(df[df["sim"] < 5]) +
    pn.geom_line(pn.aes("iteration", "value")) +
    pn.facet_grid("param~sim", scales="free_y") +
    pn.theme(figure_size=(7, 13))
)
```

These look weird...
What about simulation 0?

```{python}
(
    pn.ggplot(df[df["sim"] == 0]) +
    pn.geom_line(pn.aes("iteration", "value")) +
    pn.facet_wrap("~param", scales="free_y") +
    pn.theme(figure_size=(7, 13)) +
    pn.geom_hline(pn.aes(yintercept="true"),colour="red",data=df_params)
)
```

That doesn't look converged.

Do it without chopping or thinning

```{python}
df_full_sim0 = pd.DataFrame(
    posteriors[0].flatten(),
    index=pd.MultiIndex.from_product([range(posteriors.shape[1]), log_posterior.get_param_names()],
                                     names=["iteration", "param"]),
    columns=["value"]
).reset_index()
(
    pn.ggplot(df_full_sim0) +
    pn.geom_line(pn.aes("iteration", "value")) +
    pn.facet_wrap("~param", scales="free_y") +
    pn.theme(figure_size=(7, 13)) +
    pn.geom_hline(pn.aes(yintercept="true"),colour="red",data=df_params)
)
```

Some of these look really wrong, e.g. theta is negative.
Truth and samples possibly on wrong scale?
I guess samples are being plotted on the scale they are sampled on (e.g. log).
